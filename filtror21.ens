;===============================================================================
;====== b190082, Nicolas Cossio Miravalles - 190393, Antonio Amo Cuellar========
;===============================================================================
;=========  PROYECTO ENSAMBLADOR MC88110, ESTRUCTURA DE COMPUTADORES  ==========
;===============================================================================

;=====================================================================
;===========================MACROS====================================
;=====================================================================
PUSH:	MACRO(ra)
		subu r30, r30, 4
		st ra, r30, r0
		ENDMACRO

POP:    MACRO(ra)
		ld ra, r30, 0
		addu r30, r30, 4
		ENDMACRO

SWAP:   MACRO(ra, rb)
		or r20, ra, ra
		or ra, rb, rb
		or rb, r20, r20
		ENDMACRO

LEA:    MACRO(ra, eti)
		or ra, r0, low(eti)
		or.u ra, ra, high(eti)
		ENDMACRO

LOAD:   MACRO(ra, eti)
		LEA(ra, eti)
		ld ra, ra, r0
		ENDMACRO

DBNZ:	MACRO(reg,ETI)
		sub reg,reg,1
		cmp r4,reg,0
		bb0 2,r4,ETI
		ENDMACRO

;====================================================================
;=======================DATOS DE PRUEBAS=============================
;====================================================================
		;nFiltrados
		org 0
		data 0x0E
		org 400
		data -1
		;Sqrt1d
		org 600
		data 0x000F6969
		
		;COMP
		org 1000
		IM1:
		data 4, 8
		data 0xD1000000, 0x00000000
		data 0x00000000, 0x00007A1D
		data 0x01000000, 0x00000000
		data 0x00000000, 0x000000FF

		IM2:
		data 4, 8
		data 0x02000000, 0x00000000
		data 0x00000000, 0x00000182
		data 0xFF000000, 0x00000000
		data 0x00000000, 0x00000010

		;VPIXEL
		org 2000
		vpSUBIM:
		data 0x00000000, 0x00000055, 0x00000000
		
		vpFILTRO:
		data 0x00000000, 0x00000001, 0x00000000, 0x00000001, 0x00000000, 0x00000001
		data 0x00000000, 0x00000001, 0x00000002, 0xFFFFFFFF, 0x00000000, 0x00000001
		data 0x00000000, 0x00000001, 0x00000000, 0x00000001, 0x00000000, 0x00000001
		
		
		;SUBMATRIZ
		org 2400
		IMSM:
		data 5, 8
		data 0x04030201, 0x08070605
		data 0x0C0B0A09, 0x100F0E0D, 0x14131211, 0x18171615
		data 0x1C1B1A19, 0x201F1E1D, 0x24232221, 0x28272625
		
		SUBIMSM:
		data 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
		
		;FilPixel
		org 2600

		FPIM:
		data 4, 8
		data 0x44444444, 0x44444444
		data 0x33343444, 0x44444444
		data 0x44884444, 0x44444444
		data 0x44444444, 0x44444444

		FPFILTRO: 
		data 0x00000001, 0x00000008, 0x00000001, 0x00000008, 0x00000001, 0x00000008
		data 0x00000001, 0x00000008, 0x00000000, 0x00000008, 0x00000001, 0x00000008
		data 0x00000001, 0x00000008, 0x00000001, 0x00000008, 0x00000001, 0x00000008

				
;====================================================================
;==========================PROGRAMA==================================
;====================================================================

org 5000

PPnFiltrados:	LEA(r30,60000) ; incializamos puntero pila
				LOAD(r9, 400) ; inicializamos oper
				PUSH(r9) ; metemos en oper en pila
				bsr nFiltrados ; llamada a nFiltrados
				POP(r9) ; reseteamos la pila
				stop


PPnSqrt:		LEA(r30,60000) ; incializamos puntero pila
				LOAD(r9, 600) ; inicializamos num
				PUSH(r9) ; metemos num en pila
				bsr Sqrt1d ; llamada a nFiltrados
				POP(r9) ; reseteamos la pila
				stop


PPnComp:		LEA(r30, 60000); incializamos puntero pila
				LEA(r14, IM2)
				LEA(r15, IM1)
				PUSH (r14)
				PUSH (r15)
				bsr Comp
				; reseteo de pila = POP *2
				POP(r15)
				POP(r14)
				stop

PPnVPixel:		LEA(r30, 60000)
				LEA(r14,vpSUBIM); r14= dir(SUBIM)
				LEA(r15,vpFILTRO); r15= dir(FILTRO)
				PUSH(r14); dir(SUBIM) a pila
				PUSH(r15); dir(FILTRO) a pila
				bsr ValorPixel;
				;Sacamos de pila los parametros, orden contrario a PUSH
				POP(r15)
				POP(r14)
				stop

PPnSubMatriz:	LEA(r30,60000);incializamos puntero pila
				addu r2, r0, 3; r2=i
				addu r3, r0, 6; r3=j
				LEA(r14,IMSM); r14= dir(IMSM)
				LEA(r15,SUBIMSM); r15= dir(SUBIMSM)
				PUSH(r3);j a pila
				PUSH(r2); i a pila
				PUSH(r15); dir(subIM) a pila
				PUSH(r14); dir(IM) a pila
				bsr SubMatriz; salta a SubMatriz
				;Sacamos de pila los parametros, orden contrario a PUSH
				POP(r14)
				POP(r15)
				POP(r2)
				POP(r3)
				stop

PPnFilPixel:	LEA(r30, 60000)
				LEA(r14,FPIM); r14= dir(IMAGEN)
				LEA(r15,FPFILTRO); r15= dir(FILTRO)
				addu r2, r0, 2; r2=i
				addu r3, r0, 2; r3=j
				PUSH(r15); dir(FILTRO) a pila
				PUSH(r3);dir(j) a pila
				PUSH(r2);dir(i) a pila
				PUSH(r14); dir(IMAGEN) a pila
				bsr FilPixel
				;Sacamos de pila los parametros, orden contrario a PUSH
				POP(r14)
				POP(r2)
				POP(r3)
				POP(r15)
				stop

;=====================RUTINAS A IMPLEMENTAR=========================================
FiltRec:		PUSH(r1)
				POP(r1)
				jmp(r1)

Filtro: 		PUSH(r1)
				POP(r1)
				jmp(r1)





;====================================================================
;==========================RUTINAS===================================
;====================================================================

;=========================nFILTRADOS=================================

org 20000

nFiltrados:		ld r2, r30, 0 ; inicializamos oper desde la pila, r2 como registro auxiliar
				ld r29, r0, 0 ; inicializamos nF que est√° en [0]
				cmp r3, r2, 0
				bb1 ge, r3, nmayoracero
				bb0 ge, r3, nmenoracero

nmayoracero: 	or r29, r2, r2 ; r29<-nF=oper, guardado en r2
				br endNfiltr

nmenoracero:	add r29, r29, 1 ;sumamos 1 a nF
				br endNfiltr

endNfiltr: 		st r29,r0,0      ; nF a memoria [0]
				jmp(r1)      ; salta a PC y end

;=========================SQRT=================================
Sqrt1d:			ld r2, r30, 0 ; inicializamos Num desde la pila, r2 como registro auxiliar
				cmp r3, r2, 2 ;
				bb1 lt, r3, sqles;
				bb0 lt, r3, inisq;

sqles: 			mulu r29, r2, 10 ; valor de retorno * 10
				jmp(r1) ; devolvemos control a llamante

				;Condiciones iniciales para el bucle
inisq:			mulu r5, r2, 100 ; r5 es a=Num*100
				or r6, r5, r0 ; copio a r6 para usarlo mas tarde
				or r4, r0, 1 ; r4 es b=1



buclesqrt:		addu r7, r5,r4; (a+b)
				divs r5, r7, 2; a=(a+b)/2
				divs r4, r6, r5; b=(Num * 100)/a, Num*100 en r5
				cmp r3, r4, r5 ; b>a?
				bb1 gt, r3, cambiosq; b>a --> swap
				
despSwap:		sub r7, r5, r4; a-b
				cmp r3, r7, 1; (a-b)<=1?
				bb0 le, r3, buclesqrt; !(a-b)<=1 -> itera de nuevo


endsq:			or r29, r4, 0;
				jmp(r1)

cambiosq: 		or r20, r0, 0; reseteo r20=placeholder
				SWAP(r4, r5)
				br despSwap

;======================COMP==========================================================
Comp:			or r2, r0, 0 ;incializacion de Dif
				
				ld r10, r30, 0;inicializacion Im1
				ld r4, r10, 0; r4=filas
				ld r5, r10, 4; r5=columnas
				mulu r22, r4, r5; r22=size im1 = contador
				ld r6, r10, 8; primer elemento Im1
				;-------------------------------------
				ld r11, r30, 4;inicializacion Im2
				ld r9, r11, 8; primer elemento Im2

bucleComp:		cmp r24, r22, 0
				bb1 le, r24, finComp ; contador==0 -> fin
				ld.bu r4, r10, 8; Elem im1
				add r10, r10, 1; sig elem de im1
				ld.bu r5, r11, 8; elem Im2
				add r11, r11, 1; sig elem de Im2
				subu r12, r4, r5; elem1-elem2
				muls r12, r12, r12; (elem1-elem2)^2
				add r2, r2, r12; Dif+(elem1-elem2)^2
				subu r22, r22, 1; contador --
				br bucleComp

finComp: 		PUSH(r2)
				br Sqrt1d
				POP(r2)
				jmp(r1)
	
	
;=====================VALORPIXEL================================				
ValorPixel:		ld r10, r30, 4; r10= dir(SUBIM)
				ld r20, r30, 0; r11= dir(FILTRO)
				
				or r2, r0, 0; r2=ACC=acumulador
				or r4, r0, 0; r4=contador bucle
				or r25, r0, 256;

bucleVPixel:	cmp r5, r4, 9; contador==0-> fin
				bb1 eq, r5, finVPixel
				ld.b r3, r10, 0; r3=elemSUBIM
				ld r6, r20, 0; r6=MFNumerador
				muls r8, r3, r25;
				muls r8, r8, r6; 
				ld r7, r20,  4; r7=MFDenominador <- mfiltro
				divs r8, r8, r7;
				add r2, r2, r8; ACC=ACC+((256*elemSUBIM)*MFNUM)/MFD
				addu r4, r4, 1; contador++
				addu r20, r20, 8; siguiente par del filtro
				addu r10, r10, 1; siguiente elemSUBIM
				br bucleVPixel

finVPixel:		divs r29, r2, 256; r29=ACC/256
				jmp(r1)

;=======================SUBMATRIZ===========================================
				;desplazamiento hasta (i, j)= numerocolumnas*i + j 
SubMatriz:		
				ld r10, r30, 0; r10= dir(IM)
				ld r11, r30, 4; r11= dir(SUBIM)
				ld r4, r30, 8; r4=i
				ld r5, r30, 12; r5=j
				subu r4, r4, 1; i=i-1
				subu r5, r5, 1; j=j-1
				ld r6, r10, 4; r6=numero columnas 
				mulu r7, r4, r6
				addu r7, r7, r5;r7=desplazamiento hasta I(i-1,j-1)
				subu r23, r6, 2; desplazamiento hasta I primer elemento correspond sig fila = numero columnas -2
				or r8, r0, 0; r8= contador total 
				or r9, r0, 0; r9= contador fila
				addu r10, r10, 8; r10 apunta a primer elemento I

bucleSM:		cmp r14, r9, 3; 
				bb0 eq, r14, contSM;
				
				
resetr9:		or r9, r0, 0; resetea r9, fin de fila 
				addu r7, r23, r7; sig elem = r7+columnas-2
										
contSM:			cmp r15, r8, 9;
				bb1 eq, r15, finSM; 
				;r10+r7=dir(elem correspondiente)
				ld.bu r13, r10, r7; r13<-elem correspondiente
				;r11+r9=dir(SUBIM) correspondiente
				st.b r13, r11, r8; r13=elemento correspondiente-> [dir(SUBIM)=r11+r8] 

				addu r9, r9, 1; contador fila ++
				addu r8, r8, 1; contador total ++ 
				;desplazamiento ++ si y solo si no hay salto de fila
				cmp r14, r9, 3; 
				;Si hay salto de fila
				bb1 eq, r14, resetr9;
				;No hay salto de fila
				addu r7, r7, 1; sig elemento IM
				br bucleSM
				
finSM:			jmp(r1); 

;=======================FilPixel===========================================			
		
;Falla r30, no se suma cuando hay pop deberia ser EA5E=59998

		
FilPixel:		ld r10, r30, 0; r10= dir(IM)
				ld r11, r30, 12; r11= dir(FILTRO)
				
				ld r4, r30, 4; r4=i
				ld r5, r30, 8; r5=j
				ld r6, r10, 0; r6=filas IM
				ld r7, r10, 4; r7=columnas IM
				subu r30, r30, 12; espacio para subIM 3x3
				or r27, r30, r0; dir(futura subIM) en pila
				PUSH(r5); j a pila
				PUSH(r4); i a pila
				PUSH (r27); dir(subIM)
				PUSH (r10); dir(IM)
				or r22, r7, r0; r22=copia columnas
				addu r10, r10, 8; r10 a primer elemento IM
				subu r6, r6, 1; r6=filas-1
				subu r7, r7, 1; r7=columnas-1
				cmp r12, r4, r6;
				bb0 lt, r12, guardaPixel ; i<filas-1?
				cmp r12, r5, r7;
				bb0 lt, r12, guardaPixel ; j<columnas-1?
				cmp r12, r4, 0;
				bb0 gt, r12, guardaPixel ; i>0?
				cmp r12, r5, 0;
				bb0 gt, r12, guardaPixel ; j>0?
				bsr SubMatriz; ; SubMatriz(j,i,Subimagen,Imagen)	
				POP(r10)
				POP(r27)
				POP(r4)
				POP(r5)
para:			
				addu r11, r30, 24; dir(mfiltro) en pila
				ld r11, r11, 0;
				ld r27, r27, 0;
				PUSH(r27)
				PUSH(r11)
				bsr ValorPixel; ValorPixel(MFiltro,SubImagen)
				POP(r11)
				POP(r27)
				cmp r27, r29, 255
				bb1 gt, r27, mayora255
				cmp r27, r29,0;
				bb1 lt, r27, menora0
				br finFP
				
				
menora0:		ld r29, r9, 0;
				br finFP;
				
mayora255:		ld r29, r0, 255;
				br finFP;
				
finFP:			jmp(r1)

guardaPixel:	mulu r23, r22, r4; desplazamiento hasta (i, j)= numerocolumnas*i +j 
				addu r23, r23, r5
				ld.bu r29, r10, r23; guarda valor pixel r29
				jmp(r1)
				
				



































